// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     states: Matrix13_1
 *     states_cov: Matrix12_12
 *     mag_body: Matrix31
 *     mag_noise: Matrix31
 *     m: Matrix31
 *
 * Outputs:
 *     innovation: Matrix31
 *     innovation_cov: Matrix33
 *     H: Matrix3_12
 */
template <typename Scalar>
void AhrsUpdateMag(const Eigen::Matrix<Scalar, 13, 1>& states,
                   const Eigen::Matrix<Scalar, 12, 12>& states_cov,
                   const Eigen::Matrix<Scalar, 3, 1>& mag_body,
                   const Eigen::Matrix<Scalar, 3, 1>& mag_noise,
                   const Eigen::Matrix<Scalar, 3, 1>& m,
                   Eigen::Matrix<Scalar, 3, 1>* const innovation = nullptr,
                   Eigen::Matrix<Scalar, 3, 3>* const innovation_cov = nullptr,
                   Eigen::Matrix<Scalar, 3, 12>* const H = nullptr) {
  // Total ops: 212

  // Input arrays

  // Intermediate terms (47)
  const Scalar _tmp0 = std::pow(states(1, 0), Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(states(2, 0), Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = 2 * states(1, 0);
  const Scalar _tmp5 = _tmp4 * states(0, 0);
  const Scalar _tmp6 = 2 * states(2, 0);
  const Scalar _tmp7 = _tmp6 * states(3, 0);
  const Scalar _tmp8 = _tmp4 * states(3, 0);
  const Scalar _tmp9 = -_tmp8;
  const Scalar _tmp10 = _tmp6 * states(0, 0);
  const Scalar _tmp11 = m(1, 0) * (_tmp5 + _tmp7) + m(2, 0) * (_tmp10 + _tmp9);
  const Scalar _tmp12 = std::pow(states(0, 0), Scalar(2));
  const Scalar _tmp13 = 1 - 2 * _tmp12;
  const Scalar _tmp14 = -_tmp7;
  const Scalar _tmp15 = 2 * states(0, 0) * states(3, 0);
  const Scalar _tmp16 = _tmp4 * states(2, 0);
  const Scalar _tmp17 = m(0, 0) * (_tmp14 + _tmp5) + m(2, 0) * (_tmp15 + _tmp16);
  const Scalar _tmp18 = -_tmp15;
  const Scalar _tmp19 = m(0, 0) * (_tmp10 + _tmp8) + m(1, 0) * (_tmp16 + _tmp18);
  const Scalar _tmp20 = -_tmp10;
  const Scalar _tmp21 = std::pow(states(3, 0), Scalar(2));
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp0 + _tmp22;
  const Scalar _tmp24 = -_tmp2;
  const Scalar _tmp25 = _tmp12 + _tmp24;
  const Scalar _tmp26 = -_tmp16;
  const Scalar _tmp27 =
      m(0, 0) * (_tmp20 + _tmp9) + m(1, 0) * (_tmp15 + _tmp26) + m(2, 0) * (_tmp23 + _tmp25);
  const Scalar _tmp28 = -_tmp12;
  const Scalar _tmp29 = _tmp17 + m(1, 0) * (_tmp0 + _tmp21 + _tmp24 + _tmp28);
  const Scalar _tmp30 = _tmp27 * states_cov(1, 1) + _tmp29 * states_cov(2, 1) + states_cov(9, 1);
  const Scalar _tmp31 = _tmp27 * states_cov(1, 2) + _tmp29 * states_cov(2, 2) + states_cov(9, 2);
  const Scalar _tmp32 = -_tmp5;
  const Scalar _tmp33 = _tmp2 + _tmp28;
  const Scalar _tmp34 =
      m(0, 0) * (_tmp23 + _tmp33) + m(1, 0) * (_tmp14 + _tmp32) + m(2, 0) * (_tmp20 + _tmp8);
  const Scalar _tmp35 = -_tmp0;
  const Scalar _tmp36 = _tmp21 + _tmp35;
  const Scalar _tmp37 = _tmp19 + m(2, 0) * (_tmp33 + _tmp36);
  const Scalar _tmp38 = _tmp34 * states_cov(2, 1) + _tmp37 * states_cov(0, 1) + states_cov(10, 1);
  const Scalar _tmp39 = _tmp34 * states_cov(2, 2) + _tmp37 * states_cov(0, 2) + states_cov(10, 2);
  const Scalar _tmp40 = _tmp11 + m(0, 0) * (_tmp25 + _tmp36);
  const Scalar _tmp41 = m(0, 0) * (_tmp32 + _tmp7) + m(1, 0) * (_tmp12 + _tmp2 + _tmp22 + _tmp35) +
                        m(2, 0) * (_tmp18 + _tmp26);
  const Scalar _tmp42 = _tmp40 * states_cov(1, 1) + _tmp41 * states_cov(0, 1) + states_cov(11, 1);
  const Scalar _tmp43 = _tmp40 * states_cov(1, 2) + _tmp41 * states_cov(0, 2) + states_cov(11, 2);
  const Scalar _tmp44 = _tmp27 * states_cov(1, 0) + _tmp29 * states_cov(2, 0) + states_cov(9, 0);
  const Scalar _tmp45 = _tmp34 * states_cov(2, 0) + _tmp37 * states_cov(0, 0) + states_cov(10, 0);
  const Scalar _tmp46 = _tmp40 * states_cov(1, 0) + _tmp41 * states_cov(0, 0) + states_cov(11, 0);

  // Output terms (3)
  if (innovation != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _innovation = (*innovation);

    _innovation(0, 0) = -_tmp11 - m(0, 0) * (_tmp1 + _tmp3 + 1) + mag_body(0, 0) - states(10, 0);
    _innovation(1, 0) = -_tmp17 - m(1, 0) * (_tmp13 + _tmp3) + mag_body(1, 0) - states(11, 0);
    _innovation(2, 0) = -_tmp19 - m(2, 0) * (_tmp1 + _tmp13) + mag_body(2, 0) - states(12, 0);
  }

  if (innovation_cov != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _innovation_cov = (*innovation_cov);

    _innovation_cov(0, 0) = _tmp27 * _tmp30 + _tmp27 * states_cov(1, 9) + _tmp29 * _tmp31 +
                            _tmp29 * states_cov(2, 9) + mag_noise(0, 0) + states_cov(9, 9);
    _innovation_cov(1, 0) = _tmp27 * _tmp38 + _tmp29 * _tmp39 + _tmp34 * states_cov(2, 9) +
                            _tmp37 * states_cov(0, 9) + states_cov(10, 9);
    _innovation_cov(2, 0) = _tmp27 * _tmp42 + _tmp29 * _tmp43 + _tmp40 * states_cov(1, 9) +
                            _tmp41 * states_cov(0, 9) + states_cov(11, 9);
    _innovation_cov(0, 1) = _tmp27 * states_cov(1, 10) + _tmp29 * states_cov(2, 10) +
                            _tmp31 * _tmp34 + _tmp37 * _tmp44 + states_cov(9, 10);
    _innovation_cov(1, 1) = _tmp34 * _tmp39 + _tmp34 * states_cov(2, 10) + _tmp37 * _tmp45 +
                            _tmp37 * states_cov(0, 10) + mag_noise(1, 0) + states_cov(10, 10);
    _innovation_cov(2, 1) = _tmp34 * _tmp43 + _tmp37 * _tmp46 + _tmp40 * states_cov(1, 10) +
                            _tmp41 * states_cov(0, 10) + states_cov(11, 10);
    _innovation_cov(0, 2) = _tmp27 * states_cov(1, 11) + _tmp29 * states_cov(2, 11) +
                            _tmp30 * _tmp40 + _tmp41 * _tmp44 + states_cov(9, 11);
    _innovation_cov(1, 2) = _tmp34 * states_cov(2, 11) + _tmp37 * states_cov(0, 11) +
                            _tmp38 * _tmp40 + _tmp41 * _tmp45 + states_cov(10, 11);
    _innovation_cov(2, 2) = _tmp40 * _tmp42 + _tmp40 * states_cov(1, 11) + _tmp41 * _tmp46 +
                            _tmp41 * states_cov(0, 11) + mag_noise(2, 0) + states_cov(11, 11);
  }

  if (H != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _H = (*H);

    _H.setZero();

    _H(1, 0) = _tmp37;
    _H(2, 0) = _tmp41;
    _H(0, 1) = _tmp27;
    _H(2, 1) = _tmp40;
    _H(0, 2) = _tmp29;
    _H(1, 2) = _tmp34;
    _H(0, 9) = 1;
    _H(1, 10) = 1;
    _H(2, 11) = 1;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
