// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cpp_templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Args:
 *     states: Matrix13_1
 *     update: Matrix12_1
 *
 * Outputs:
 *     next_states: Matrix13_1
 */
template <typename Scalar>
void AhrsUpdateRetract(const Eigen::Matrix<Scalar, 13, 1>& states,
                       const Eigen::Matrix<Scalar, 12, 1>& update,
                       Eigen::Matrix<Scalar, 13, 1>* const next_states = nullptr) {
  // Total ops: 52

  // Input arrays

  // Intermediate terms (8)
  const Scalar _tmp0 =
      std::sqrt(Scalar(std::pow(update(0, 0), Scalar(2)) + std::pow(update(1, 0), Scalar(2)) +
                       std::pow(update(2, 0), Scalar(2)) + Scalar(9.9999999999999998e-17)));
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = std::sin(_tmp1) / _tmp0;
  const Scalar _tmp3 = _tmp2 * states(3, 0);
  const Scalar _tmp4 = _tmp2 * update(1, 0);
  const Scalar _tmp5 = _tmp2 * update(2, 0);
  const Scalar _tmp6 = std::cos(_tmp1);
  const Scalar _tmp7 = _tmp2 * update(0, 0);

  // Output terms (1)
  if (next_states != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _next_states = (*next_states);

    _next_states(0, 0) =
        _tmp3 * update(0, 0) - _tmp4 * states(2, 0) + _tmp5 * states(1, 0) + _tmp6 * states(0, 0);
    _next_states(1, 0) =
        _tmp3 * update(1, 0) - _tmp5 * states(0, 0) + _tmp6 * states(1, 0) + _tmp7 * states(2, 0);
    _next_states(2, 0) =
        _tmp3 * update(2, 0) + _tmp4 * states(0, 0) + _tmp6 * states(2, 0) - _tmp7 * states(1, 0);
    _next_states(3, 0) =
        -_tmp4 * states(1, 0) - _tmp5 * states(2, 0) + _tmp6 * states(3, 0) - _tmp7 * states(0, 0);
    _next_states(4, 0) = states(4, 0) + update(3, 0);
    _next_states(5, 0) = states(5, 0) + update(4, 0);
    _next_states(6, 0) = states(6, 0) + update(5, 0);
    _next_states(7, 0) = states(7, 0) + update(6, 0);
    _next_states(8, 0) = states(8, 0) + update(7, 0);
    _next_states(9, 0) = states(9, 0) + update(8, 0);
    _next_states(10, 0) = states(10, 0) + update(9, 0);
    _next_states(11, 0) = states(11, 0) + update(10, 0);
    _next_states(12, 0) = states(12, 0) + update(11, 0);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
